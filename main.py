from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
from starlette.responses import Response

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"]
)

books = [
    {
        "id": 1,
        "title": "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –≤ Python",
        "author": "–ú—ç—Ç—Ç—å—é",
    },
    {
        "id": 2,
        "title": "Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤ Python",
        "author": "–ê—Ä—Ç—ë–º",
    },
]


class BookSchema(BaseModel):
    title: str
    author: str


@app.get("/books",
         tags=["–ö–Ω–∏–≥–∏ üìö"],
         summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥",
         description="<h1>–û—Ç–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥</h1>",
         )
def get_books():
    return books


@app.post("/books", tags=["–ö–Ω–∏–≥–∏ üìö"])
def add_book(book: BookSchema, response: Response
             ):
    new_book_id = len(books) + 1
    books.append({
        "id": new_book_id,
        "title": book.title,
        "author": book.author
    })
    return {"success": True, "message": "–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞"}


@app.put("/books/{book_id}", tags=["–ö–Ω–∏–≥–∏ üìö"])
def change_book(book_id: int, data: BookSchema):
    match = [book for book in books if book["id"] == book_id]
    if not match:
        raise HTTPException(status_code=404, detail="–ö–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    match[0] |= data.model_dump()
    return {"success": True, "message": "–ö–Ω–∏–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"}


@app.delete("/books/{book_id}", tags=["–ö–Ω–∏–≥–∏ üìö"])
def delete_book(book_id: int):
    match = [book for book in books if book["id"] == book_id]
    if not match:
        raise HTTPException(status_code=404, detail="–ö–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    books.remove(match[0])
    return {"success": True, "message": "–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞"}
